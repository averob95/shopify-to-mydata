from flask import Flask, request, jsonify
import requests
import datetime
import os

app = Flask(__name__)

# API Configurations
MYDATA_API_URL = "https://provider.timologisi.online/api/v1/Provider/SendInvoices"
API_KEY = os.getenv("MYDATA_API_KEY")  # Use environment variable for security

@app.route('/shopify-webhook', methods=['POST'])
def receive_shopify_order():
    data = request.json  # Get Shopify order data

    # Extract order details
    customer = data.get("customer", {})
    order_items = data.get("line_items", [])
    total_price = float(data.get("total_price", 0))
    tax_price = float(data.get("total_tax", 0))
    currency = data.get("currency", "EUR")

    # Build invoice JSON
    invoice = {
        "invoice": {
            "issuer": {
                "vatNumber": "EL157694702",
                "country": "GR",
                "branch": 0,
                "address": {
                    "street": "AGAMEMNONOS",
                    "number": "8",
                    "postalCode": "19016",
                    "city": "ARTEMIDA-ATTIKIS"
                }
            },
            "counterpart": {
                "vatNumber": customer.get("tax_exempt", "000000000"),  # Use real VAT if available
                "country": "GR",
                "name": f"{customer.get('first_name', '')} {customer.get('last_name', '')}",
                "address": {
                    "street": customer.get("default_address", {}).get("address1", ""),
                    "postalCode": customer.get("default_address", {}).get("zip", ""),
                    "city": customer.get("default_address", {}).get("city", "")
                }
            },
            "invoiceHeader": {
                "series": "INV",
                "aa": str(data.get("id")),
                "issueDate": datetime.datetime.now().isoformat(),
                "invoiceType": "1.1",
                "currency": currency
            },
            "paymentMethods": [
                {
                    "type": 3,  # Card payment
                    "amount": total_price
                }
            ],
            "invoiceDetails": [
                {
                    "lineNumber": idx + 1,
                    "lineDescription": item["name"],
                    "quantity": item["quantity"],
                    "lineUnitPrice": float(item["price"]),
                    "netValue": float(item["price"]) * item["quantity"],
                    "vatCategory": 1,  # Standard VAT
                    "vatAmount": (float(item["price"]) * item["quantity"]) * (tax_price / total_price)  # Correct VAT
                } for idx, item in enumerate(order_items)
            ],
            "invoiceSummary": {
                "totalNetValue": total_price - tax_price,
                "totalVatAmount": tax_price,
                "totalGrossValue": total_price
            }
        }
    }

    # Send to myDATA Provider API
    headers = {"API-KEY": API_KEY, "Content-Type": "application/json"}
    
    try:
        response = requests.post(MYDATA_API_URL, json=invoice, headers=headers)
        response_data = response.json()
        
        # Handle errors
        if response.status_code != 200 or response_data.get("statusCode") not in ["Success", "Offline"]:
            print(f"Error Sending Invoice: {response_data}")
        
        return jsonify({"status": response.status_code, "response": response_data})

    except Exception as e:
        print(f"API Error: {str(e)}")
        return jsonify({"status": 500, "error": "Internal Server Error"}), 500

if __name__ == '__main__':
    app.run(port=5000, debug=True)
